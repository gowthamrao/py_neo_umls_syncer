# GitHub Workflow for Python Package with Poetry and Docker
#
# Security:
# - Pins actions to full commit SHA.
# - Enforces least privilege for GITHUB_TOKEN.
#
# Efficiency:
# - Uses concurrency control to cancel redundant runs.
# - Caches Poetry dependencies using the modern actions/setup-python method.
# - Sets a timeout for all jobs.
#
# Features:
# - Runs tests across a matrix of Python versions and Operating Systems.
# - Separates unit and integration tests using pytest markers.
# - Provides highly verbose logs for debugging.
# - Uploads separate and distinct coverage reports to Codecov with flags.
# - Uploads test reports as artifacts on failure.

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel redundant workflows.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Set default permissions to read-only for security.
permissions:
  contents: read

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, macos-latest, windows-2025]

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Poetry using pipx
        # This is the recommended robust installation method.
        # It's done before setup-python to enable caching.
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          pipx install poetry
        shell: bash

      - name: Set up Python ${{ matrix.python-version }} and cache Poetry environment
        id: setup-python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Dump environment details for debugging
        run: |
          echo "OS/Runner: ${{ runner.os }}"
          echo "Python version:"
          python --version
          echo "Poetry version:"
          poetry --version
          echo "Poetry Environment Info:"
          poetry env info
          echo "PATH:"
          echo $PATH
        shell: bash

      - name: Install dependencies
        run: poetry install --no-interaction -vv --with test,dev
        shell: bash

      - name: Verify Dependency Tree
        run: poetry show --tree
        shell: bash

      - name: Run Unit Tests
        # Using pytest markers is a robust way to separate test types.
        # This command creates a distinct coverage data file for the unit tests.
        run: |
          poetry run pytest -vv -m "not integration" --cov=./ --cov-report=xml:coverage-unit.xml
        shell: bash
        env:
          COVERAGE_FILE: .coverage.unit

      - name: Run Integration Tests
        # This command creates a distinct coverage data file for the integration tests.
        # By using separate data files, we avoid overwriting results and do not need --cov-append.
        run: |
          poetry run pytest -vv -m "integration" --cov=./ --cov-report=xml:coverage-integration.xml
        shell: bash
        env:
          COVERAGE_FILE: .coverage.integration

      - name: Upload Unit Test coverage to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-unit.xml
          flags: ${{ matrix.os }}-py${{ matrix.python-version }}-unit
          fail_ci_if_error: true
          verbose: true

      - name: Upload Integration Test coverage to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-integration.xml
          flags: ${{ matrix.os }}-py${{ matrix.python-version }}-integration
          fail_ci_if_error: true
          verbose: true

      - name: Upload reports and logs on failure
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: failure()
        with:
          name: ci-failure-reports-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage-unit.xml
            coverage-integration.xml
            .coverage.unit
            .coverage.integration